@page "/MapPaymentForTime"
@using Newtonsoft.Json
@using OmaDW.Web2.Data
@inject FinancialDataService FinancialDataService
@inject IDialogService DialogService

<MudContainer Class="mt-16 px-8" MaxWidth="MaxWidth.False">
    <MudGrid>
        <MudTable
            T="TransactionContainer"
            Dense="true"
            Elevation="2"
            Striped="true"

            Items="TopRowsNotMapped"
        Filter="container => ApplyFilters(container) "
            >
            <HeaderContent>

                @* public DateTime Date { get; set; } *@
                @* public string Receiver { get; set; } *@
                @* public string Description { get; set; } *@
                @* public string Message { get; set; } *@
                @* public decimal Amount { get; set; } *@
                <MudTh>
                    Date
                </MudTh>
                <MudTh>
                    Saaja/Maksaja
                </MudTh>
                <MudTh>
                    Selite
                </MudTh>
                <MudTh>
                    Viesti
                </MudTh>
                <MudTh>
                    Summa
                </MudTh>
                <MudTh>
                    Ohjaa
                </MudTh>


                <MudTh Style="border-left: #191c1f">
                    OhjattuSumma
                </MudTh>
                <MudTh>
                    Alkaen
                </MudTh>
                <MudTh>
                    Päättyen
                </MudTh>
                <MudTh>
                    Poista ohjaus
                </MudTh>

            </HeaderContent>
            <RowTemplate>
                <MudTd>
                    @context.OriginalTransaction.Date.ToString("dd.MM.yyyy")
                </MudTd>
                <MudTd>
                    @context.OriginalTransaction.Receiver
                </MudTd>
                <MudTd>
                    @context.OriginalTransaction.Description
                </MudTd>
                <MudTd>
                    @context.OriginalTransaction.Message
                </MudTd>
                <MudTd>
                    @context.OriginalTransaction.Amount
                </MudTd>
                <MudTd>
                    <MudButton OnClick="(e) => OpenToAdd(e,context) ">Ohjaa</MudButton>
                </MudTd>
                <MudTd>
                    @context.MapPaymentForTime?.Amount
                </MudTd>
                <MudTd>
                    @context.MapPaymentForTime?.FromDate.Value.ToString("dd.MM.yyyy")
                </MudTd>
                <MudTd>
                    @context.MapPaymentForTime?.ToDate.Value.ToString("dd.MM.yyyy")
                </MudTd>
                <MudTd>
                    <MudButton OnClick="(e) => Remove(e,context) ">Poista</MudButton>
                </MudTd>

            </RowTemplate>


        </MudTable>

    </MudGrid>
</MudContainer>



@code {

    protected override void OnInitialized()
    {

        Initialize();
        base.OnInitialized();
    }

    private async void Initialize()
    {
        TopRowsNotMapped = (await FinancialDataService.GetTransactionContainers()).OrderBy(x => x.OriginalTransaction.Amount).Take(500).ToList();
        await InvokeAsync(StateHasChanged);
    }

    public List<TransactionContainer> TopRowsNotMapped { get; set; }

    private async void OpenToAdd(MouseEventArgs mouseEventArgs, TransactionContainer transaction)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
         var parameters = new DialogParameters();
                parameters.Add("Transaction", transaction );


         var dialog = DialogService.Show<MapPaymentForTimeForm>("Simple Dialog", parameters, options);

        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            transaction.SetMapPaymentForTime(result.Data as MapPaymentForTime);
            FinancialDataService.AddMapping((MapPaymentForTime)result.Data);
            await InvokeAsync(StateHasChanged);
        }
    }

    private bool ApplyFilters(TransactionContainer container)
    {
        return true;
    }

    private async Task Remove(MouseEventArgs mouseEventArgs, TransactionContainer context)
    {
        var result = await DialogService.ShowMessageBox("Poista ohjaus", "Haluatko varmasti poistaa ohjauksen?", yesText: "Kyllä", noText: "Ei", cancelText: "Peruuta");
        if (result.HasValue && result.Value)
        {
            FinancialDataService.RemoveMapping(context.MapPaymentForTime);
            context.RemoveMapPaymentForTime();
            await InvokeAsync(StateHasChanged);
        }
    }

}