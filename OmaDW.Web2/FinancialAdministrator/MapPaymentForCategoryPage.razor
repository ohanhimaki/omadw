@page "/MapPaymentForCategory"
@using OmaDW.Web2.Data
@inject FinancialDataService FinancialDataService
@inject IDialogService DialogService

<MudContainer Class="mt-16 px-8" MaxWidth="MaxWidth.False">
    <MudGrid>
        <MudItem xs="12">
            <MudGrid xs="12">
                <MudItem xs="4">


                <MudAutocomplete
                    T="string"
                    SearchFunc="GetCategories"
                    Label="Category"
                    @bind-Value="Category"
                    CoerceValue="true"

                    Variant="Variant.Outlined"></MudAutocomplete>
                </MudItem>
                <MudItem xs="4">
                    <MudAutocomplete
                        T="string"
                    SearchFunc="GetSubCategories"
                        Label="SubCategory"
                        @bind-Value="SubCategory"
                        CoerceValue="true"
                        Variant="Variant.Outlined"></MudAutocomplete>
                </MudItem>
                <MudItem xs="2">
                    <MudSwitch @bind-Checked="MapReceiver" Color="Color.Primary">Yhdistä saajalla</MudSwitch>

                </MudItem>
                <MudItem xs="2">
                    <MudButton
                        Variant="Variant.Filled"
                        Color="Color.Success"
                        OnClick="(e) => AddCategory(e)">Tallenna</MudButton>

                </MudItem>
            </MudGrid>

        </MudItem>
        <MudItem>
            @if (TransactionContainers is null || TransactionContainers.Count == 0)
            {
                <div>Ladataan...</div>
            }
            else
            {


            <MudTable
                T="TransactionContainer"
                Items="TransactionContainers.OrderBy(x => x.OriginalTransaction.Receiver)"
                Filter="FilterFunction"
                RowsPerPage="100"
                MultiSelection="true"
                @bind-SelectedItems="@selectedItems1"
                Dense="true"
                Elevation="2"
                Hover="true"
                Striped="true">
                <ToolBarContent>
                    <MudText Typo="Typo.h6">Ryhmittele kategoriaan</MudText>
                    <MudSpacer/>

                    <MudSwitch @bind-Checked="ShowOnlyNotMapped" Color="Color.Primary">Näytä vain ohjaamattomat</MudSwitch>
                    <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                </ToolBarContent>
                <HeaderContent>

                    @* public DateTime Date { get; set; } *@
                    @* public string Receiver { get; set; } *@
                    @* public string Description { get; set; } *@
                    @* public string Message { get; set; } *@
                    @* public decimal Amount { get; set; } *@
                    <MudTh>
                        Date
                    </MudTh>
                    <MudTh>
                        Saaja/Maksaja
                    </MudTh>
                    <MudTh>
                        Selite
                    </MudTh>
                    <MudTh>
                        Viesti
                    </MudTh>
                    <MudTh>
                        Summa
                    </MudTh>

                    <MudTh Style="border-left: #191c1f">
                        Kategoria
                    </MudTh>
                    <MudTh>
                        Ali-kategoria
                    </MudTh>
                    <MudTh>
                        Mäppäys avain
                    </MudTh>

                </HeaderContent>
                <RowTemplate>
                    <MudTd>
                        @context.OriginalTransaction.Date.ToString("dd.MM.yyyy")
                    </MudTd>
                    <MudTd>
                        @context.OriginalTransaction.Receiver
                    </MudTd>
                    <MudTd>
                        @context.OriginalTransaction.Description
                    </MudTd>
                    <MudTd>
                        @context.OriginalTransaction.Message
                    </MudTd>
                    <MudTd>
                        @context.OriginalTransaction.Amount
                    </MudTd>
                    <MudTd>
                        @context.MapPaymentForCategory?.Category
                    </MudTd>
                    <MudTd>
                        @context.MapPaymentForCategory?.SubCategory
                    </MudTd>
                    <MudTd>
                        @context.MapPaymentForCategory?.MappedLabel
                    </MudTd>

                </RowTemplate>


            </MudTable>

            }

        </MudItem>

    </MudGrid>
</MudContainer>

@code {

    private HashSet<TransactionContainer> selectedItems1 = new HashSet<TransactionContainer>();

    protected override void OnInitialized()
    {

        Initialize();
        base.OnInitialized();
    }

    private async void Initialize()
    {
        TransactionContainers = (await FinancialDataService.GetTransactionContainers()).OrderBy(x => x.OriginalTransaction.Amount).ToList();
        await InvokeAsync(StateHasChanged);
    }

    public List<TransactionContainer> TransactionContainers { get; set; }



    public string? searchString1 { get; set; } = "";

    private bool FilterFunction(TransactionContainer arg)
    {

        return
            ((!ShowOnlyNotMapped || arg.MapPaymentForCategory is null)) &&
            (arg.OriginalTransaction.Receiver.Contains(searchString1, StringComparison.OrdinalIgnoreCase) ||
               arg.OriginalTransaction.Description.Contains(searchString1, StringComparison.OrdinalIgnoreCase) ||
               arg.OriginalTransaction.Message.Contains(searchString1, StringComparison.OrdinalIgnoreCase));
    }

    public string Category { get; set; } = "";
    public string SubCategory { get; set; } = "";

    public bool? MapReceiver { get; set; } = true;

    private async void AddCategory(MouseEventArgs args)
    {
        var tmpList = new List<MapPaymentForCategory>();
        foreach (var transactionContainer in selectedItems1.ToList())
        {
            var mapPaymentForCategory = new MapPaymentForCategory
            {
                Category = Category,
                SubCategory = SubCategory,
            };
            if (MapReceiver.HasValue && MapReceiver.Value)
            {
                mapPaymentForCategory.ReceiverMapped = transactionContainer.OriginalTransaction.Receiver;
            }
            else
            {
                mapPaymentForCategory.TransactionMapped = transactionContainer.OriginalTransaction;
            }
            tmpList.Add(mapPaymentForCategory);
            transactionContainer.SetMapPaymentForCategory(mapPaymentForCategory);
        }
        Console.WriteLine("Rivejä lisätty: " + tmpList.Count);
        tmpList = tmpList.Distinct().ToList();
        Console.WriteLine("Rivejä lisätty: " + tmpList.Count);

        FinancialDataService.AddCategoryMapping(tmpList);
        await InvokeAsync(StateHasChanged);

    }

    public bool ShowOnlyNotMapped { get; set; }

    private async Task<IEnumerable<string>> GetCategories(string arg)
    {
        return await FinancialDataService.GetCategories(arg);
    }
    private async Task<IEnumerable<string>> GetSubCategories(string arg)
    {
        return await FinancialDataService.GetSubCategories(arg);
    }

}
