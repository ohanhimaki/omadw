@page "/MapPaymentForCategory"
@using OmaDW.Web2.Data
@inject FinancialDataService FinancialDataService
@inject IDialogService DialogService

<MudContainer Class="mt-16 px-8" MaxWidth="MaxWidth.False">
    <MudGrid>
        <MudItem xs="12">
            <MudGrid xs="12">
                <MudItem xs="4">


                <MudAutocomplete
                    T="string"
                    Label="Category"
                    @bind-Value="Category"
                    CoerceValue="true"
                    Variant="Variant.Outlined"></MudAutocomplete>
                </MudItem>
                <MudItem xs="4">
                    <MudAutocomplete
                        T="string"
                        Label="SubCategory"
                        @bind-Value="SubCategory"
                        CoerceValue="true"
                        Variant="Variant.Outlined"></MudAutocomplete>
                </MudItem>
                <MudItem xs="2">
                    <MudSwitch @bind-Checked="MapReceiver" Color="Color.Primary">Yhdistä saajalla</MudSwitch>

                </MudItem>
                <MudItem xs="2">
                    <MudButton
                        Variant="Variant.Filled"
                        OnClick="(e) => AddCategory(e)"></MudButton>

                </MudItem>
            </MudGrid>

        </MudItem>
        <MudItem>

            <MudTable
                T="TransactionContainer"
                Items="TopRowsNotMapped"
                Filter="FilterFunction"
                MultiSelection="true"
                @bind-SelectedItems="@selectedItems1"
                Dense="true"
                Elevation="2"
                Hover="true"
                Striped="true"
            >
            <ToolBarContent>
                <MudText Typo="Typo.h6">Ryhmittele kategoriaan</MudText>
                <MudSpacer />

                <MudSwitch @bind-Checked="ShowOnlyNotMapped" Color="Color.Primary">Näytä vain ohjaamattomat</MudSwitch>
                <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <HeaderContent>

                @* public DateTime Date { get; set; } *@
                @* public string Receiver { get; set; } *@
                @* public string Description { get; set; } *@
                @* public string Message { get; set; } *@
                @* public decimal Amount { get; set; } *@
                <MudTh>
                    Date
                </MudTh>
                <MudTh>
                    Saaja/Maksaja
                </MudTh>
                <MudTh>
                    Selite
                </MudTh>
                <MudTh>
                    Viesti
                </MudTh>
                <MudTh>
                    Summa
                </MudTh>
                <MudTh>
                    Ohjaa
                </MudTh>


                <MudTh Style="border-left: #191c1f">
                    OhjattuSumma
                </MudTh>
                <MudTh>
                    Alkaen
                </MudTh>
                <MudTh>
                    Päättyen
                </MudTh>
                <MudTh>
                    Poista ohjaus
                </MudTh>

            </HeaderContent>
            <RowTemplate>
                <MudTd>
                    @context.OriginalTransaction.Date.ToString("dd.MM.yyyy")
                </MudTd>
                <MudTd>
                    @context.OriginalTransaction.Receiver
                </MudTd>
                <MudTd>
                    @context.OriginalTransaction.Description
                </MudTd>
                <MudTd>
                    @context.OriginalTransaction.Message
                </MudTd>
                <MudTd>
                    @context.OriginalTransaction.Amount
                </MudTd>
                <MudTd>
                    <MudButton OnClick="(e) => OpenToAdd(e, context)">Ohjaa</MudButton>
                </MudTd>
                <MudTd>
                    @context.MapPaymentForCategory?.Category
                </MudTd>
                <MudTd>
                    @context.MapPaymentForCategory?.SubCategory
                </MudTd>
                <MudTd>
                    @context.MapPaymentForCategory?.MappedLabel
                </MudTd>
                <MudTd>
                    <MudButton OnClick="(e) => Remove(e, context)">Poista</MudButton>
                </MudTd>

            </RowTemplate>


        </MudTable>

        </MudItem>

    </MudGrid>
</MudContainer>

@code {

    private HashSet<TransactionContainer> selectedItems1 = new HashSet<TransactionContainer>();

    protected override void OnInitialized()
    {

        Initialize();
        base.OnInitialized();
    }

    private async void Initialize()
    {
        TopRowsNotMapped = (await FinancialDataService.GetTransactionContainers()).OrderBy(x => x.OriginalTransaction.Amount).Take(500).ToList();
        await InvokeAsync(StateHasChanged);
    }

    public List<TransactionContainer> TopRowsNotMapped { get; set; }

    private async void OpenToAdd(MouseEventArgs mouseEventArgs, TransactionContainer transaction)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
         var parameters = new DialogParameters();
                parameters.Add("Transaction", transaction );


         var dialog = DialogService.Show<MapPaymentForTimeForm>("Simple Dialog", parameters, options);

        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            transaction.SetMapPaymentForTime(result.Data as MapPaymentForTime);
            FinancialDataService.AddMapping((MapPaymentForTime)result.Data);
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task Remove(MouseEventArgs mouseEventArgs, TransactionContainer context)
    {
        var result = await DialogService.ShowMessageBox("Poista ohjaus", "Haluatko varmasti poistaa ohjauksen?", yesText: "Kyllä", noText: "Ei", cancelText: "Peruuta");
        if (result.HasValue && result.Value)
        {
            FinancialDataService.RemoveMapping(context.MapPaymentForTime);
            context.RemoveMapPaymentForTime();
            await InvokeAsync(StateHasChanged);
        }
    }


    public string? searchString1 { get; set; } = "";

    private bool FilterFunction(TransactionContainer arg)
    {
        return
            (ShowOnlyNotMapped || arg.MapPaymentForTime == null) &&
            (arg.OriginalTransaction.Receiver.Contains(searchString1, StringComparison.OrdinalIgnoreCase) ||
               arg.OriginalTransaction.Description.Contains(searchString1, StringComparison.OrdinalIgnoreCase) ||
               arg.OriginalTransaction.Message.Contains(searchString1, StringComparison.OrdinalIgnoreCase));
    }

    public string Category { get; set; } = "";
    public string SubCategory { get; set; } = "";

    public bool? MapReceiver { get; set; } = true;

    private async void AddCategory(MouseEventArgs args)
    {
        var tmpList = new List<MapPaymentForCategory>();
        foreach (var transactionContainer in selectedItems1.ToList())
        {
            var mapPaymentForCategory = new MapPaymentForCategory
            {
                Category = Category,
                SubCategory = SubCategory,
            };
            if (MapReceiver.HasValue && MapReceiver.Value)
            {
                mapPaymentForCategory.ReceiverMapped = transactionContainer.OriginalTransaction.Receiver;
            }
            else
            {
                mapPaymentForCategory.TransactionMapped = transactionContainer.OriginalTransaction;
            }
            tmpList.Add(mapPaymentForCategory);
            transactionContainer.SetMapPaymentForCategory(mapPaymentForCategory);
        }
        Console.WriteLine("Rivejä lisätty: " + tmpList.Count);
        tmpList = tmpList.Distinct().ToList();
        Console.WriteLine("Rivejä lisätty: " + tmpList.Count);

        FinancialDataService.AddCategoryMapping(tmpList);
        await InvokeAsync(StateHasChanged);

    }

    public bool ShowOnlyNotMapped { get; set; }

}
